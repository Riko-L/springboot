package com.rko.myspring.controller.api;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.rko.myspring.model.User;
import com.rko.myspring.repository.UserRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class ApiController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	// Get ALL USERS
	@GetMapping(path = "/user")
	public @ResponseBody Iterable<User> getAllUser() {

		return userRepository.findAll();

	}

	// ADD USER
	@PostMapping(path = "/user")
	public @ResponseBody void addUser(@RequestParam String firstName, @RequestParam String lastName,
			@RequestParam String email, @RequestParam Integer birthdayDate) {

		User user = new User();
		user.setFirstName(firstName);
		user.setLastName(lastName);
		user.setEmail(email);
		user.setBirthdayDate(birthdayDate);

		userRepository.save(user);

	}

	// UPDATE USER
	@PutMapping(path = "/user/{id}")
	public @ResponseBody void updateUser(@PathVariable Long id, @RequestParam String firstName,
			@RequestParam String lastName, @RequestParam String email, @RequestParam Integer birthdayDate) {

		Optional<User> user = userRepository.findById(id);

		if (user.isPresent()) {
			User n = new User();
			n.setId(id);
			n.setFirstName(firstName);
			n.setLastName(lastName);
			n.setEmail(email);
			n.setBirthdayDate(birthdayDate);
			n.setBirthdayDate(1552);

			userRepository.save(n);

		}
	}

	// SHOW USER
	@GetMapping(path = "/user/{id}")
	public @ResponseBody Optional<User> showUser(@PathVariable Long id) {

		return userRepository.findById(id);
	}

	// DELETE USER

	@DeleteMapping(path = "/user/{id}")
	public @ResponseBody void deleteUser(@PathVariable Long id) {

		userRepository.deleteById(id);

	}

}